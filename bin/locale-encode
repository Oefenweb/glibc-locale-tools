#!/usr/bin/env python

# -*- coding: utf-8 -*-

import sys
import re
from collections import OrderedDict

# LC_IDENTIFICATION section
lc_identification = re.compile(r'^LC_IDENTIFICATION')
lc_end_identification = re.compile(r'^END\s+?LC_IDENTIFICATION')
in_lc_identification = False

# Rest of the LC sections
lc_all = re.compile(r'^LC_')
lc_end_all = re.compile(r'^END\s+?LC_')
in_lc_all = False

# translit sections
translit_start = re.compile(r'^translit_start')
translit_end = re.compile(r'^translit_end')
in_translit = False

# Match comment (but only if comment char is %) (e.g. % Dutch Language Locale for the Netherlands)
comment = re.compile(r'^(%|#)')
# Match copy (e.g. copy "i18n")
copy = re.compile(r'^copy')
# Match include (e.g. include  "translit_combining";"")
include = re.compile(r'^include')
# Match unicode characters
unicode_characters = re.compile(r'<U[\dA-F]{4}>')
# Match blank line
blank = re.compile('^\s*$')
# Match non quoted line
non_quoted = re.compile(r'^\w+?\s*\d*(;\d+)*$')
# Match string segment line
string_segment = re.compile(r'"\;"|"')
# Between quotes pattern
between_quotes_pattern = r'"([^"]*)"'
#
opened_quotes = re.compile(r'"')
in_open_quotes = False


def print_touched_line(line):
  # return
  print line,


def print_untouched_line(line):
  # return
  print line,


def unicode_decode(string):
  return unichr(int(string, 16))


def unicode_encode(string):
  return '<U%04X>' % (ord(char))


def find_replace_start_position(line):
  p = re.compile(r'^[a-z_]+\s+"')
  m = p.search(line)
  if m:
    return m.span()[1]
  return 0


line_number = 0
for line in sys.stdin:
  line_number += 1

  # LC_IDENTIFICATION start line
  if lc_identification.search(line):
    in_lc_identification = True
    print_untouched_line(line)
    continue

  # LC_IDENTIFICATION end line
  if lc_end_identification.search(line):
    in_lc_identification = False
    print_untouched_line(line)
    continue

  # Are we in the LC_IDENTIFICATION section
  if in_lc_identification:
    print_untouched_line(line)
    continue

  # LC_* start line
  if lc_all.search(line):
    in_lc_all = True
    print_untouched_line(line)
    continue

  # LC_* end line
  if lc_end_all.search(line):
    in_lc_all = False
    print_untouched_line(line)
    continue

  # translit start line
  if translit_start.search(line):
    in_translit = True
    print_untouched_line(line)
    continue

  # translit end line
  if translit_end.search(line):
    in_translit = False
    print_untouched_line(line)
    continue

  # Are we in the translit section
  if in_translit:
    print_untouched_line(line)
    continue

  a = len(re.findall(opened_quotes, line))
  if in_open_quotes:
    b = (a % 2 == 0)
  else:
    b = (a % 2 != 0)

  # Comment line
  if not in_open_quotes:
    if comment.search(line):
      in_open_quotes = b
      print_untouched_line(line)
      continue

  in_open_quotes = b

  # Copy line
  if copy.search(line):
    print_untouched_line(line)
    continue

  # Include line
  if include.search(line):
    print_untouched_line(line)
    continue

  # Include line
  if include.search(line):
    print_untouched_line(line)
    continue

  # Not in a section
  if not in_lc_all:
    print_untouched_line(line)
    continue

  # Blank line
  if blank.search(line):
    print_untouched_line(line)
    continue

  # Non quoted line
  if non_quoted.search(line):
    print_untouched_line(line)
    continue

  modified_line = line
  modified_line = modified_line.decode('utf-8')

  working_line = modified_line

  # remove trailing / or trailing ", ; and / by a "
  working_line = re.sub(r'/$|";/$', '"', working_line)
  # remove trailing "
  working_line = re.sub(r'"[^"]*?$', '', working_line)
  # remove leading "
  working_line = re.sub(r'^[^"]*?"', '', working_line)

  # Split line
  words = string_segment.split(working_line)

  # Remove newline of last element
  words[-1] = words[-1].rstrip('\n')

  word_map = {}
  for word in words:
    new_word = []
    for char in word:
      new_word.append(unicode_encode(char))
    word_map[word] = ''.join(new_word)

  # Replace words in modified_line using word_map
  # modified_line = reduce(lambda x, y: x.replace(y, word_map[y]), word_map, modified_line)

  for k, v in word_map.iteritems():
    between_quotes = re.search(between_quotes_pattern, modified_line)
    # Between quotes
    if between_quotes:
      modified_line = re.sub(between_quotes_pattern, lambda match: match.group(0).replace(k, v), modified_line)
    # Not between quotes
    else:
      modified_line = modified_line.replace(k, v)

  modified_line = modified_line.encode('utf-8')

  print_touched_line(modified_line)
